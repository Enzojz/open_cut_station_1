local laneutil = require "laneutil"
local pipe = require "opencut/pipe"

local laneWidth = 2.4
local baseVector = pipe.new * {0, 2.5, 3.5, 6.5, 7.5, 10}
local leftVector = baseVector * pipe.map(pipe.neg()) * pipe.range(2, #baseVector) * pipe.rev() + baseVector
local rightVector = leftVector * pipe.rev()

function data()
    return {
            
            collider = {
                params = {
                
                },
                type = "MESH",
            
            },
            lods = {
                {
                    animations = {
                    
                    },
                    children = {
                        {
                            id = "station/train/passenger/1990/lod_0_perron_double_end.msh",
                            transf = {
                                1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
                            },
                            type = "MESH",
                        
                        },
                    
                    },
                    events = {
                    
                    },
                    matConfigs = {
                        {
                            0, 0, 0,
                        },
                    },
                    static = false,
                    visibleFrom = 0,
                    visibleTo = 1920,
                
                },
            },
            metadata = {
                transportNetworkProvider = {
                    laneLists = {
                        {
                            transportModes = {"PERSON"},
                            nodes = laneutil.makeLanes(
                                pipe.new * {rightVector, leftVector}
                                * pipe.map2({1.5, -1.5},
                                    function(ly, x) return ly * pipe.range(1, #ly - 1) * pipe.map2(ly * pipe.range(2, #ly),
                                        function(y1, y2) return {{x, y1, 0.8}, {x, y2, 0.8}, {0, -x, 0}, {0, -x, 0}, laneWidth} end)
                                    end)
                                * pipe.flatten()
                                * pipe.concat({{{1.5, 0.0, .80}, {-1.5, 0.0, .80}, {-3.0, 0.0, .0}, {-3.0, 0.0, .0}, laneWidth}})
                        
                        )
                        }
                    },
                    terminals = {
                        {personNodes = {20}, personEdges = {10, 11, 12, 13, 14, 15, 16, 17, 18, 19}},
                        {personNodes = {0}, personEdges = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}}
                    }
                }
            }
    }
end
