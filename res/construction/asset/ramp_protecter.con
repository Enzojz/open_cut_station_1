local coor = require("coor")
local func = require("func")
local pipe = require("pipe")

local wallSegs = {1, 2, 3, 4, 5}
local wallLength = 20
local wallHeight = {5, 8.8, 10.8, 12.8, 15, 17.5, 20}

local newModel = function(m, ...)
    return {
        id = m,
        transf = coor.mul(...)
    }
end


function data()
    
    return {
        type = "ASSET_TRACK",
        description = {
            name = _("Miscellaneous"),
            description = _("Ramp Protector")
        },
        availability = {
            yearFrom = 1950
        },
        buildMode = "MULTI",
        categories = {"misc"},
        order = 100,
        skipCollision = false,
        autoRemovable = false,
        
        params = {
            {
                key = "wallLength",
                name = _("Length of Wall") .. "(m)",
                values = func.map(wallSegs, function(n) return tostring(n * wallLength) end),
            },
            {
                key = "wallHeight",
                name = _("Wall height") .. "(m)",
                values = func.map(func.map(wallHeight, math.floor), tostring),
                defaultIndex = 3
            },
        },
        
        updateFn = function(params)
            local result = {}
            
            local height = wallHeight[params.wallHeight + 1] + 0.5
            local nSeg = wallSegs[params.wallLength + 1]
            local mSeg = math.ceil(height / 10)
            local zDisp = height - mSeg * 10
            local totalLength = wallLength * nSeg
            
            result.models =
                pipe.new
                * func.seq(0, mSeg - 1)
                * pipe.mapFlatten(function(m) return func.seqMap({1, nSeg}, function(n) return {m = m, n = n} end) end)
                * pipe.map(function(v)
                    return newModel("station/train/passenger/opencut/wall_20.mdl",
                        coor.xXY(), coor.scaleY(2), coor.trans(coor.xyz((v.n - 0.5) * wallLength - 0.5 * totalLength, -3.5, zDisp + v.m * 10))
                )
                end)
            
            local extWidth = 2 * height
            local slopeExt = height / (extWidth - 6)
            local yMin = -totalLength * 0.5
            local yMax = totalLength + yMin
            result.terrainAlignmentLists = {
                {
                    type = "GREATER",
                    faces = {{
                        {yMin, -4, height},
                        {yMin, -extWidth, height},
                        {yMax, -extWidth, height},
                        {yMax, -4, height},
                    },
                    {
                        {yMax, -4, height},
                        {yMax, -extWidth, height},
                        {yMax + extWidth - 6, -extWidth, 0},
                        {yMax + extWidth - 6, -5, 0},
                    },
                    {
                        {yMin - extWidth + 6, -5, 0},
                        {yMin - extWidth + 6, -extWidth, 0},
                        {yMin, -extWidth, height},
                        {yMin, -4, height},
                    }},
                    slopeLow = 0,
                    slopeHigh = 0,
                },
                {
                    type = "GREATER",
                    faces = {{
                        {yMin, -extWidth, height},
                        {yMin, -extWidth - 1, height},
                        {yMax, -extWidth - 1, height},
                        {yMax, -extWidth, height},
                    },
                    },
                    slopeLow = slopeExt,
                    slopeHigh = slopeExt,
                },
            }
            
            return result
        end
    }

end
