local coor = require("opencut/coor")
local func = require("opencut/func")
local pipe = require("opencut/pipe")

local wallSegs = {1, 2, 3, 4, 5}
local wallLength = 10
local wallHeight = {1, 5, 8, 10, 12, 16, 18, 20}
local heightAdj = {0, 0.5, 1, 2, 2.5, 3, 4, 5}
local rTxtList = {"●", "●", "•", "∙", "0", "∙", "•", "●", "●"}

local newModel = function(m, ...)
    return {
        id = m,
        transf = coor.mul(...)
    }
end

local rWall = "station/train/passenger/opencut/wall_10_2.mdl"
local lWall = "station/train/passenger/opencut/wall_lst_2.mdl"
local fWall = "station/train/passenger/opencut/wall_fst_2.mdl"
local paving = "station/train/passenger/opencut/paving_base.mdl"
local tWalls = {lWall, fWall}

function data()
    
    return {
        type = "ASSET_TRACK",
        description = {
            name = _("Concrete Retaining Wall"),
            description = _("Concrete Retaining Wall")
        },
        availability = {
            yearFrom = 1950
        },
        buildMode = "MULTI",
        categories = {"misc"},
        order = 100,
        skipCollision = true,
        autoRemovable = false,
        
        params = {
            {
                key = "wallLength",
                name = _("Length") .. "(m)",
                values = func.map(wallSegs, function(n) return tostring(n * wallLength) end),
            },
            {
                key = "wallHeight",
                name = _("Height") .. "(m)",
                values = func.map(wallHeight, tostring),
                defaultIndex = 2
            },
            {
                key = "heightAdj",
                name = _("Height Adjustment") .. "(m)",
                values = func.map(heightAdj, tostring),
                defaultIndex = 0
            },
            {
                key = "adjSide",
                name = "",
                values = {_("Left"), _("Right")},
                defaultIndex = 0
            },
            {
                key = "slope",
                name = _("Slope"),
                values = rTxtList,
                defaultIndex = 4
            },
            {
                key = "offset",
                name = _("Distance to track") .. "(m)",
                values = func.map({0, 1, 2, 3, 4, 5}, tostring),
                defaultIndex = 0
            },
            {
                key = "aligned",
                name = _("Modify terrain"),
                values = {_("Yes"), _("No")},
                defaultIndex = 0
            },
            {
                key = "thickness",
                name = _("Thickness"),
                values = func.map({0.5, 0.75, 1, 1.5, 2}, tostring),
                defaultIndex = 0
            }
        },
        
        updateFn = function(params)
            local result = {}
            
            local height = wallHeight[params.wallHeight + 1] + 1.3
            local nSeg = wallSegs[params.wallLength + 1]
            local mSeg = math.ceil(height * 0.1)
            local zHeight = (height / mSeg)
            local zFactor = zHeight * 0.1
            local totalLength = wallLength * nSeg
            local adjHeight = heightAdj[params.heightAdj + 1]
            local segAdj = adjHeight / nSeg
            local sX = coor.scaleX(({1, 1.5, 2, 3, 4})[params.thickness + 1]) * coor.transX(({0, -0.125, -0.25, -0.5, -0.75})[params.thickness + 1]) * coor.rotZ(0.5 * pi)
            
            
            local adjN = function(n) return (params.adjSide == 0) and n or nSeg - n + 1 end
            local mShear = coor.shearZoX(({-0.075, -0.06, -0.04, -0.02, 0, 0.02, 0.04, 0.06, 0.075})[params.slope + 1])
            local mOffset = coor.transY(-params.offset - 0.2)
            result.models =
                pipe.new
                * func.seq(0, mSeg - 2)
                * pipe.mapFlatten(function(m) return func.seqMap({1, nSeg}, function(n) return {m = m, n = n} end) end)
                * pipe.map(function(v)
                    return newModel(rWall, sX, coor.scaleZ(zFactor), coor.trans(coor.xyz((v.n - 0.5) * wallLength - 0.5 * totalLength, -2.75, v.m * zHeight)), mShear, mOffset
                )
                end)
                +
                pipe.new
                * func.seq(1, nSeg)
                * pipe.mapFlatten(function(n)
                    return {
                        newModel(rWall, sX, coor.scaleZ((zHeight + (adjN(n) - 1) * segAdj) * 0.1), coor.trans(coor.xyz((n - 0.5) * wallLength - 0.5 * totalLength, -2.75, (mSeg - 1) * zHeight)), mShear, mOffset),
                        newModel(rWall, sX, coor.scaleZ(0.5), coor.trans(coor.xyz((n - 0.5) * wallLength - 0.5 * totalLength, -2.75, -5)), mShear, mOffset)
                    }
                
                end)
                +
                pipe.new
                * func.seq(1, nSeg)
                * pipe.map(function(n) return
                    newModel(tWalls[params.adjSide + 1],
                        sX,
                        coor.scaleZ(segAdj * 0.1),
                        coor.trans(coor.xyz((n - 0.5) * wallLength - 0.5 * totalLength, -2.75, height + (adjN(n) - 1) * segAdj)),
                        mShear, mOffset
                )
                end)
                * function(w) return params.heightAdj == 0 and {} or w end
                +
                (params.aligned == 0 and
                pipe.new
                * func.seq(1, nSeg)
                * pipe.mapFlatten(function(n)
                    return pipe.new
                        * func.seq(0, params.offset)
                        * pipe.mapFlatten(function(m)
                            return
                                {
                                    newModel(paving, coor.rotZ(0.5 * pi), coor.transX(-2.5), coor.scaleZ(zFactor), coor.trans(coor.xyz((n - 0.5) * wallLength - 0.5 * totalLength, -2 + m, 0.5)), mShear, mOffset),
                                    newModel(paving, coor.rotZ(0.5 * pi), coor.transX(2.5), coor.scaleZ(zFactor), coor.trans(coor.xyz((n - 0.5) * wallLength - 0.5 * totalLength, -2 + m, 0.5)), mShear, mOffset)
                                }
                        end
                )
                end)
                or {}
            )
            
            local ptA = coor.xyz(totalLength * 0.5, 0, height + (params.adjSide == 0 and 0 or adjHeight)) .. mShear * mOffset
            local ptB = coor.xyz(-totalLength * 0.5, 0, height + (params.adjSide == 0 and adjHeight or 0)) .. mShear * mOffset
            
            local extWidth = 2 * height
            
            local l = -2.5
            
            local top = {
                ptB + coor.xyz(0, l, 0),
                ptB + coor.xyz(0, -extWidth, 0),
                ptA + coor.xyz(0, -extWidth, 0),
                ptA + coor.xyz(0, l, 0)
            }
            
            local slot = {
                ptB + coor.xyz(0, 0, 0),
                ptB + coor.xyz(0, -2.75, 0),
                ptA + coor.xyz(0, -2.75, 0),
                ptA + coor.xyz(0, 0, 0)
            }
            
            
            local extB = (ptB.z + 10)
            local slopeB = {
                ptB + coor.xyz(-extB, l, -ptB.z - 10),
                ptB + coor.xyz(-extB, -extWidth - extB, -ptB.z - 10),
                ptB + coor.xyz(0, -extWidth, 0),
                ptB + coor.xyz(0, l, 0),
            }
            
            local extA = (ptA.z + 10)
            local slopeA = {
                ptA + coor.xyz(0, l, 0),
                ptA + coor.xyz(0, -extWidth, 0),
                ptA + coor.xyz(extA, -extWidth - extA, -ptA.z - 10),
                ptA + coor.xyz(extA, l, -ptA.z - 10),
            }
            
            local slopeC = {
                ptA + coor.xyz(0, -extWidth, 0),
                ptA + coor.xyz(extA, -extWidth - extA, -ptA.z - 10),
                ptB + coor.xyz(-extB, -extWidth - extB, -ptB.z - 10),
                ptB + coor.xyz(0, -extWidth, 0)
            }
            
            
            
            result.terrainAlignmentLists =
                params.aligned == 1
                and {
                    {
                        type = "EQUAL",
                        faces = {}
                    }
                }
                or {
                    {
                        type = "GREATER",
                        faces = {
                            func.map(top, coor.vec2Tuple),
                            func.map(slopeA, coor.vec2Tuple),
                            func.map(slopeB, coor.vec2Tuple),
                            func.map(slopeC, coor.vec2Tuple)
                        },
                        slopeLow = 1e5,
                        slopeHigh = 1e5,
                    },
                    {
                        type = "EQUAL",
                        faces = {}
                    }
                }
            
            if (params.aligned == 0) then
                result.groundFaces = {{face = func.map(slot, coor.vec2Tuple), modes = {{type = "FILL", key = "hole"}}}}
            end
            
            return result
        end
    }

end
